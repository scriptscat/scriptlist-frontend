name: Release

on:
  push:
    branches:
      - main
      - release/*
      - test/*

env:
  APP_NAME: ${{ github.event.repository.name }}
  NAMESPACE: app
  REGISTRY: ${{ secrets.DOCKER_REGISTRY && secrets.DOCKER_REGISTRY || 'docker.io' }}
  REGISTRY_MIRROR: ${{ secrets.DOCKER_REGISTRY_MIRROR && secrets.DOCKER_REGISTRY_MIRROR || 'docker.io' }}
  REPOSITORY: ${{ github.repository }}
  DOMAIN: scriptcat.org
  ENV: ${{ startsWith(github.ref, 'refs/heads/release/') && 'pre' || startsWith(github.ref, 'refs/heads/test/') && 'test' || github.ref=='refs/heads/main' && 'prod' }}
  RUNNER_TOOL_CACHE: /toolcache
  BASEIMAGE: ${{ secrets.BASEIMAGE && secrets.BASEIMAGE || 'node:20-alpine' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"
        cache: 'pnpm'

    - name: Set outputs
      id: vars
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=${{ env.REGISTRY_MIRROR }}/moby/buildkit:buildx-stable-1

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Docker build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        file: deploy/docker/Dockerfile
        tags: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.ENV }}.${{ steps.vars.outputs.sha_short }}
        context: .
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BASEIMAGE=${{ env.BASEIMAGE }}

    - name: Set up kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        context: k8s-context

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
         version: 'v3.13.1'

    - name: Deploy ${{ env.ENV }}
      env:
        APP_NAME: ${{ env.ENV=='prod' && env.APP_NAME || format('{0}-{1}', env.APP_NAME, env.ENV) }}
        DOMAIN: ${{ env.ENV=='prod' && env.DOMAIN || format('{0}.{1}', env.ENV, env.DOMAIN) }}
        RESOURCE_CPU: ${{ env.ENV=='prod' && '500m' || '100m' }}
        RESOURCE_MEMORY: ${{ env.ENV=='prod' && '512Mi' || '128Mi' }}
        INNER_DOMAIN: ${{ env.ENV=='prod' && 'scriptlist-cago' || format('scriptlist-{0}-cago', env.ENV) }}
        APP_BBS_OAUTH_CLIENT: ${{ env.ENV=='prod' && '80mfto0y3b8v' || env.ENV=='pre' && '5uk70yummcoe' || 'sxIv1i8H1ZwnSAH' }}
        AUTO_SCALING: ${{ env.ENV=='prod' && 'true' || 'false' }}
        AUTO_SCALING_MIN_REPLICAS: ${{ env.ENV=='prod' && '2' || '1' }}
      run: |
        cd deploy/helm
        helm upgrade --install \
        --namespace $NAMESPACE $APP_NAME . -f values.yaml \
        --set image.tag=${{ env.ENV }}.${{ steps.vars.outputs.sha_short }} --set image.repository=$REGISTRY/$REPOSITORY \
        --set env[0].value=https://$DOMAIN/api/v2 \
        --set env[1].value=http://$INNER_DOMAIN.app.svc.cluster.local/api/v2 \
        --set env[2].value=$APP_BBS_OAUTH_CLIENT \
        --set ingress.hosts[0].host=$DOMAIN \
        --set ingress.tls[0].hosts[0]=$DOMAIN \
        --set resources.requests.cpu=$RESOURCE_CPU \
        --set resources.requests.memory=$RESOURCE_MEMORY \
        --set autoscaling.enabled=$AUTO_SCALING \
        --set autoscaling.minReplicas=$AUTO_SCALING_MIN_REPLICAS
